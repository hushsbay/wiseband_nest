import { Request } from 'express';
import { Repository, DataSource } from 'typeorm';
import { ResJson } from 'src/common/resjson';
import { User, UserCode } from 'src/user/user.entity';
import { GrMst, GrDtl } from 'src/chanmsg/chanmsg.entity';
export declare class UserService {
    private userRepo;
    private usercodeRepo;
    private grmstRepo;
    private grdtlRepo;
    private dataSource;
    private readonly req;
    constructor(userRepo: Repository<User>, usercodeRepo: Repository<UserCode>, grmstRepo: Repository<GrMst>, grdtlRepo: Repository<GrDtl>, dataSource: DataSource, req: Request);
    getVipList(userid: string): Promise<any>;
    chkUserRightForGroup(grid: string, userid: string): Promise<[GrMst, string]>;
    chkUser(uid: string, secret: string): Promise<[User, string]>;
    login(uid: string, pwd: string): Promise<ResJson>;
    getUserInfo(dto: Record<string, any>): Promise<any>;
    setUserInfo(dto: Record<string, any>, file: Express.Multer.File): Promise<any>;
    changePwd(dto: Record<string, any>): Promise<any>;
    setOtp(uid: string, otpNum: string): Promise<ResJson>;
    verifyOtp(uid: string, otpNum: string): Promise<ResJson>;
    orgTree(dto: Record<string, any>): Promise<any>;
    procOrgSearch(dto: Record<string, any>): Promise<any>;
    qryGroupWithUser(dto: Record<string, any>): Promise<any>;
    getVip(dto: Record<string, any>): Promise<any>;
    setVip(dto: Record<string, any>): Promise<any>;
    chkFieldValidSync(rmks: string): string;
    chkFieldValidNoSync(usernm: string, org: string, job: string, email: string, telno: string, rmks: string, kind: string): string;
    saveMember(dto: Record<string, any>): Promise<any>;
    deleteMember(dto: Record<string, any>): Promise<any>;
    saveGroup(dto: Record<string, any>): Promise<any>;
    deleteGroup(dto: Record<string, any>): Promise<any>;
}
